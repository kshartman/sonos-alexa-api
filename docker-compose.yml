services:
  sonos-api:
    image: kshartman/sonos-alexa-api:latest
    container_name: sonos-alexa-api
    network_mode: host
    restart: unless-stopped
    
    # Load environment variables from .env file
    env_file:
      - .env
    
    # Override/set specific environment variables
    environment:
      # Core settings
      - NODE_ENV=production
      - PORT=${PORT:-5005}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOGGER=${LOGGER:-winston}
      
      # Debug settings
      - DEBUG_LEVEL=${DEBUG_LEVEL:-info}
      - DEBUG_CATEGORIES=${DEBUG_CATEGORIES:-}
      
      # Default configuration
      - DEFAULT_ROOM=${DEFAULT_ROOM:-}
      - DEFAULT_MUSIC_SERVICE=${DEFAULT_MUSIC_SERVICE:-apple}
      
      # Feature flags
      - CREATE_DEFAULT_PRESETS=${CREATE_DEFAULT_PRESETS:-false}
      
      # Authentication
      - AUTH_USERNAME=${AUTH_USERNAME:-}
      - AUTH_PASSWORD=${AUTH_PASSWORD:-}
      - AUTH_REJECT_UNAUTHORIZED=${AUTH_REJECT_UNAUTHORIZED:-true}
      - AUTH_TRUSTED_NETWORKS=${AUTH_TRUSTED_NETWORKS:-127.0.0.1,::1}
      
      # TTS Configuration
      - TTS_PROVIDER=${TTS_PROVIDER:-google}
      - TTS_LANG=${TTS_LANG:-en-us}
      - VOICERSS_KEY=${VOICERSS_KEY:-}
      
      # Music Library
      - LIBRARY_REINDEX_INTERVAL=${LIBRARY_REINDEX_INTERVAL:-}
      
      # Pandora Integration
      - PANDORA_USERNAME=${PANDORA_USERNAME:-}
      - PANDORA_PASSWORD=${PANDORA_PASSWORD:-}
      
      # Spotify Integration
      - SPOTIFY_CLIENT_ID=${SPOTIFY_CLIENT_ID:-}
      - SPOTIFY_CLIENT_SECRET=${SPOTIFY_CLIENT_SECRET:-}
      - SPOTIFY_REDIRECT_URI=${SPOTIFY_REDIRECT_URI:-}
      - SPOTIFY_REFRESH_TOKEN=${SPOTIFY_REFRESH_TOKEN:-}
      
      # Music Library
      - LIBRARY_RANDOM_QUEUE_LIMIT=${LIBRARY_RANDOM_QUEUE_LIMIT:-100}
    
    # Volume mounts
    volumes:
      # Preset files (read-only by default)
      - ${HOST_PRESET_PATH:-./presets}:/app/presets:ro
      
      # Persistent data directory (RECOMMENDED for production)
      # Stores: Spotify tokens, default room/service, music library cache
      - ${HOST_DATA_PATH:-./data}:/app/data
      
      # Optional: Mount custom settings.json (env vars take precedence)
      # - ./settings.json:/app/settings.json:ro
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "10"
        compress: "true"
    
    # Health check
    healthcheck:
      test: ["CMD", "node", "-e", "fetch('http://localhost:' + process.env.PORT + '/health').then(r => process.exit(r.ok ? 0 : 1)).catch(() => process.exit(1))"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

  # Development/build service (optional)
  sonos-api-dev:
    profiles: ["dev"]
    build:
      context: .
      args:
        VERSION: ${VERSION:-dev}
        BUILD_DATE: ${BUILD_DATE:-}
        VCS_REF: ${VCS_REF:-}
    image: sonos-alexa-api:dev
    container_name: sonos-alexa-api-dev
    network_mode: host
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - NODE_ENV=development
      - LOG_LEVEL=debug
      - DEBUG_LEVEL=debug
      - DEBUG_CATEGORIES=all
    volumes:
      - ${HOST_PRESET_PATH:-./presets}:/app/presets:ro
      - ${HOST_DATA_PATH:-./data}:/app/data
      - ./logs:/app/logs