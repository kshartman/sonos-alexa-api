# Nginx Reverse Proxy Configuration for Sonos Alexa API
# 
# This is a sample configuration for running the Sonos API behind nginx.
# Adjust paths, domains, and settings according to your environment.

# Rate limiting zones - add these to your main nginx.conf http block
# limit_req_zone $binary_remote_addr zone=api_zone:10m rate=10r/s;
# limit_req_zone $binary_remote_addr zone=debug_zone:10m rate=2r/s;

server {
    listen 443 ssl http2;
    
    # Update with your domain
    server_name sonosapi.yourdomain.com;

    # Logging
    access_log /var/log/nginx/sonosapi_access.log;
    error_log  /var/log/nginx/sonosapi_error.log;

    # Client body size limits
    client_max_body_size 10M;
    client_body_buffer_size 128k;

    # Security headers - apply to all responses
    add_header X-Content-Type-Options nosniff always;
    add_header X-Frame-Options DENY always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "upgrade-insecure-requests" always;

    # Block access to hidden files (except .well-known)
    location ~ /\.(?!well-known).* {
        deny all;
        access_log off;
        log_not_found off;
        return 404;
    }

    # Legacy endpoints from old API - return 404
    location /index.html {
        return 404;
    }

    location /docs {
        return 404;
    }

    # Server-Sent Events endpoint - requires special handling
    location /events {
        # Restrict access to internal networks only
        allow 192.168.0.0/16;
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 127.0.0.1;
        deny all;
        
        proxy_pass http://localhost:5005/events;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header Connection '';
        proxy_http_version 1.1;
        
        # SSE specific settings
        proxy_read_timeout 24h;  # Long timeout for SSE connections
        proxy_buffering off;     # Disable buffering for real-time events
        proxy_cache off;
        chunked_transfer_encoding off;
        
        # Pass through auth headers
        proxy_set_header Authorization $http_authorization;
        proxy_pass_header Authorization;
    }

    # Spotify OAuth callback - must be publicly accessible
    location /spotify/callback {
        # No access restrictions - OAuth callback must be reachable
        proxy_pass http://localhost:5005/spotify/callback;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_http_version 1.1;
        
        # Standard timeouts
        proxy_connect_timeout 30s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # No auth headers needed for OAuth callback
    }

    # Debug endpoints - restrict access
    location ~ ^/debug {
        # Allow specific networks - adjust as needed
        allow 192.168.0.0/16;
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 127.0.0.1;
        # Example: allow your office IP range
        # allow 203.0.113.0/24;
        deny all;
        
        # Optional: Rate limiting for debug endpoints
        # limit_req zone=debug_zone burst=5 nodelay;
        
        proxy_pass http://localhost:5005$request_uri;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header Connection '';
        proxy_http_version 1.1;
        
        # Timeouts
        proxy_connect_timeout 30s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # No buffering for debug output
        proxy_buffering off;
        proxy_cache off;
        
        # Pass through auth headers
        proxy_set_header Authorization $http_authorization;
        proxy_pass_header Authorization;
    }

    # Main API endpoints
    location / {
        # Optional: General rate limiting
        # limit_req zone=api_zone burst=20 nodelay;
        
        proxy_pass http://localhost:5005/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_http_version 1.1;
        
        # Timeouts
        proxy_connect_timeout 30s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Buffering settings for better performance
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        proxy_busy_buffers_size 8k;
        
        # Headers
        proxy_headers_hash_max_size 512;
        proxy_headers_hash_bucket_size 128;
        
        # Pass through auth headers
        proxy_set_header Authorization $http_authorization;
        proxy_pass_header Authorization;
    }

    # SSL configuration - update paths to your certificates
    ssl_certificate /etc/letsencrypt/live/sonosapi.yourdomain.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/sonosapi.yourdomain.com/privkey.pem;

    # Modern SSL configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    # OCSP stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    ssl_trusted_certificate /etc/letsencrypt/live/sonosapi.yourdomain.com/chain.pem;

    # SSL session caching
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:10m;
    ssl_session_tickets off;
}

# Redirect HTTP to HTTPS
server {
    listen 80;
    server_name sonosapi.yourdomain.com;
    return 301 https://$server_name$request_uri;
}